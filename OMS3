use OrderManagementDB; // Switch to or create the database

db.createCollection("Orders");

// Sample data
db.Orders.insertMany([
  {
    order_id: 1,
    customer_name: "Alice",
    age: 30,
    city: "Mumbai",
    mob_no: "9876543210",
    order_date: new Date("2023-03-10"),
    products: [
      { product_name: "Shoes", quantity: 1, price: 3000 },
      { product_name: "Bag", quantity: 1, price: 2000 }
    ],
    total: 5000
  },
  {
    order_id: 2,
    customer_name: "Bob",
    age: 25,
    city: "Pune",
    mob_no: "8765432109",
    order_date: new Date("2023-05-15"),
    products: [
      { product_name: "Pen", quantity: 5, price: 50 },
      { product_name: "Notebook", quantity: 3, price: 100 }
    ],
    total: 650
  },
  {
    order_id: 3,
    customer_name: "ABC",
    age: 28,
    city: "Delhi",
    mob_no: "7654321098",
    order_date: new Date("2023-07-20"),
    products: [
      { product_name: "Laptop", quantity: 1, price: 45000 }
    ],
    total: 45000
  }
]);

Step 2: Queries

# 1. Retrieve all documents from the collection

db.Orders.find();


# 2. List the customers in ascending order of their age

db.Orders.find({}, { customer_name: 1, age: 1, _id: 0 }).sort({ age: 1 });


# 3. Display the total number of orders

db.Orders.countDocuments();


# 4. Display the mobile number of customers who have purchased the product “Shoes”

db.Orders.find({ "products.product_name": "Shoes" }, { mob_no: 1, _id: 0 });


# 5. Display the total number of customers in the collection

db.Orders.distinct("customer_name").length;


# 6. Display the total number of products purchased in `order_id: 2`

db.Orders.aggregate([
  { $match: { order_id: 2 } },
  { $unwind: "$products" },
  { $group: { _id: "$order_id", total_quantity: { $sum: "$products.quantity" } } }
]);


# 7. Add another product with a quantity of 2 to `order_id: 3` for customer “ABC”

db.Orders.updateOne(
  { order_id: 3, customer_name: "ABC" },
  { $push: { products: { product_name: "Charger", quantity: 2, price: 500 } } }
);

Step 3: Perform Index Operations

# Create an Index on `customer_name`

db.Orders.createIndex({ customer_name: 1 });


# Get Index Information

db.Orders.getIndexes();


# Drop the Index on `customer_name`

db.Orders.dropIndex("customer_name_1");


Step 4: Using MapReduce/Aggregation to Display Total Orders per Customer

# Using Aggregation

db.Orders.aggregate([
  { $group: { _id: "$customer_name", total_orders: { $sum: "$total" } } }
]);


# Using MapReduce

db.Orders.mapReduce(
  function() { emit(this.customer_name, this.total); },
  function(key, values) { return Array.sum(values); },
  { out: "TotalOrdersPerCustomer" }
);
db.TotalOrdersPerCustomer.find();

